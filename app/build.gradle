import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

//tencent bugly 使用
apply plugin: 'bugly'
bugly {
    appId = '95a2a31773'
    appKey = '8d8658e2-a74a-4d4d-8079-91e170b29e20'
    upload = true
    //这里默认为false,
    debug = true
}


android {
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }
    //在android 标签下,唯一的属性就是compileSdkVersion,buildToolsVersion
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    defaultConfig {
        applicationId rootProject.ext.android["applicationId"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    //多渠道打包
    productFlavors {

        wandoujia {}
        baidu {}
        c360 {}
        uc {}
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }


    buildTypes {

        release {
            //移除无用resource文件
            shrinkResources true
            //开启zip对齐
            zipAlignEnabled true
            //混淆
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [appName: "奥飞用户中心"]
            buildConfigField "int", "buildTime", getDebugVersionNameSuffix()

            //设置release版本只包含armeabi和armeabi-v7a的so包
            ndk {
                abiFilters "armeabi", "armeabi-v7a"
            }

//             输出自定义的apkm名,与多道打包配合,名称如输出名AlphaApp_v 1.1.0_2017-08-11_baidu.apk
//            applicationVariants.all { variant ->
//                variant.outputs.each { output ->
//                    def outputFile = output.outputFile
//                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                        // 输出名为AppName_v1.1.0_2017-08-08_wandoujia.apk
//                        def apkFile = "AlphaApp_${defaultConfig.versionName}_${buildTime()}" +
//                                "_${variant.productFlavors[0].name}_release.apk"
//                        output.outputFile = new File(outputFile.parent, apkFile)
//                    }
//                }
//            }
        }

        debug {
            debuggable true
            //生成的apk名字添加-debug,如   BuildConfig.VERSION_NAME=="v 1.1.0-debg"
            versionNameSuffix "-debug"
            //为debug版本的包名添加.debug后缀
            applicationIdSuffix ".debug"

            //manifest中的占位符
            manifestPlaceholders = [appName: "奥飞用户中心-dev"]

            //这里会在BuildConfig中生成一个buildTime参数, BuildConfig.buildTime
            //  注：buildConfigField 配置格式为： "type","name","value" 形式，
            // 如果参数是String类型，"value"外部需加单引号申明内部是String类型的，或者使用转移符 \ ,
            //  如： buildConfigField "String", "CustomValue",'"buildType"'("\"buildType\"")
            buildConfigField "int", "buildTime", getDebugVersionNameSuffix()

            //设置debug版本包含x86的so文件,为了在模拟器上进行测试
            ndk {
                abiFilters "armeabi", "armeabi-v7a", "x86"
            }


        }
    }

}


def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd', TimeZone.getTimeZone("UTC"))
    return formattedDate
}
//版本编译时间
def String getDebugVersionNameSuffix() {
    Date buildTime = new Date();
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMdd");
    String buildTimeStr = simpleDateFormat.format(buildTime);
    return buildTimeStr;
}

dependencies {
    //当有很多包时,使用这个就是将所有libs下添加为依赖
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile rootProject.ext.dependencies["junit"]

    //    //微信 记得后面修改为gradle模式
    //    compile files('libs/wechat-sdk-android-without-mta-1.3.4.jar')
    compile rootProject.ext.dependencies["appcompat-v7"]
    compile rootProject.ext.dependencies["support-design"]
    compile rootProject.ext.dependencies["support-v4"]
    compile rootProject.ext.dependencies["roundedimageview"]
    compile rootProject.ext.dependencies["Android-PickerView"]
    compile rootProject.ext.dependencies["XTabLayout"]
    compile rootProject.ext.dependencies["status-bar-compat"]
    compile rootProject.ext.dependencies["okhttp"]
    compile rootProject.ext.dependencies["convenientbanner"]
    compile rootProject.ext.dependencies["hf-recyclerview"]
    //腾讯bugly日志
    compile rootProject.ext.dependencies["crashreport"];
    compile rootProject.ext.dependencies["crashreport-native"]

    releaseCompile project(path: ':lib_sdk', configuration: 'release')
    releaseCompile project(path: ':lib_stub', configuration: 'release')
    debugCompile project(path: ':lib_sdk', configuration: 'debug')
    debugCompile project(path: ':lib_stub', configuration: 'debug')

}
